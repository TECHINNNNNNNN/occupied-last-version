start all chat with üë®‚Äçüíª

# Chulalongkorn Engineering Library Occupancy System

## Project Overview

This system helps students and faculty monitor, book, and manage library spaces through a web-based platform with real-time updates. The system prioritizes same-day bookings only for equitable access, with an intuitive visual timeline interface replacing checkbox selection.

## Technology Stack

### Frontend

- Next.js App Router with TypeScript
- Tailwind CSS for styling
- shadcn/ui component library
- React Hook Form with Zod for form validation
- Tanstack Query for data fetching
- react-calendar-timeline for visual room booking
- date-fns for date manipulation
- Framer Motion for animations

### Backend & Database

- Supabase for authentication and database
- Supabase Realtime for live updates
- Row Level Security (RLS) for data protection
- Next.js API routes for additional server functions

## Code Style & Structure

- Use TypeScript strictly with proper interfaces and types
- Prefer functional components over class components
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)
- Structure files logically: exported component, subcomponents, helpers, types
- Write concise, technical code with accurate examples
- Avoid code duplication through modularization
- Place static content at the end of files

## Naming Conventions

- Use lowercase with dashes for directories (components/room-card)
- Use PascalCase for component files (RoomCard.tsx)
- Prefer named exports for components
- Use camelCase for variables, functions, and instances

## Performance Optimization

- Minimize client-side components and state
- Use React Server Components when possible
- Implement proper loading states and skeletons
- Optimize images with Next.js Image component
- Implement efficient data fetching patterns

## Database Schema Guidelines

- Rooms table: id, name, capacity, has_projector, location
- Reservations table: id, room_id, user_id, start_time, end_time, date, agenda, attendees_count
- Enforce database-level constraints to prevent overlapping reservations
- Implement Row Level Security policies for data protection

## Reservation System Architecture

- Same-day only reservation policy
- Visual timeline interface instead of checkboxes
- Real-time updates using Supabase subscriptions
- Temporary reservation holds during booking process (30 seconds max)
- Graceful conflict resolution for concurrent bookings

## Error Handling

- Implement proper error boundaries
- Provide helpful error messages for users
- Use toast notifications for feedback
- Handle edge cases gracefully
- Validate all user inputs

## Data Fetching Strategy

- Cache room metadata aggressively
- Frequent refreshes for today's availability data
- Subscribe to real-time updates for all today's bookings
- Clear system reset at midnight for next day's availability

## UI/UX Guidelines

- Clean, modern design that prioritizes usability
- Responsive layouts that work well on mobile and desktop
- Visual indicators for room status (available, booked, in progress)
- Drag-to-select functionality for time ranges
- Clear indication of current time in timeline view

# Communication Guidelines

- If my request is unclear or you need more information, always ask me clarifying questions before taking action.
- Do not proceed with assumptions if there is any ambiguity in my instructions.

# Package Installation Guidelines

- **Never run terminal commands** to install packages (e.g., `npm install`, `pip install`).
- If a library is required for the task:
  1. Explicitly list the needed packages
  2. Explain why they‚Äôre necessary
  3. Provide the exact install command(s)
  4. Wait for my confirmation before proceeding
  5. I will download for you

# superbase

1. Do not run the Suberbase CLI .I will do deal with the database using UI in the website insted

# Enhanced Commenting Standards

- Aim for comment-to-code ratio of 30-40% for educational and complex codebases
- Every file MUST start with a comprehensive header comment that explains:

  1. COMPONENT/MODULE NAME: Clear identification of what this file contains
  2. PURPOSE: What it does and why it exists in business/functional terms
  3. CONTEXT: How it fits into the larger system architecture
  4. DATA FLOW: Brief overview of how data moves through this component/module
  5. KEY DEPENDENCIES: Important external libraries or components it relies on

- Every function, class, or significant code block MUST have a detailed header comment that explains:

  1. PURPOSE: What it does and why it exists in business/functional terms
  2. CONTEXT: How it fits into the larger system architecture
  3. INPUTS/OUTPUTS: Detailed explanation of parameters and return values
  4. ASSUMPTIONS: Any preconditions that must be true for the code to work
  5. EDGE CASES: How special situations are handled

- Use SECTION COMMENTS to organize code into logical blocks (like "STATE MANAGEMENT" or "RENDERING LOGIC")

- For React components specifically, comment on:

  - Props and their purpose/constraints
  - State variables and what they control
  - Effect dependencies and why they're needed
  - Conditional rendering logic
  - Event handlers and their purpose
  - Component lifecycle considerations

- Include IMPLEMENTATION COMMENTS throughout the code that explain:

  - WHY specific approaches were chosen (not just what the code does)
  - The REASONING behind design decisions
  - WARNINGS about potential pitfalls or non-obvious behaviors
  - PERFORMANCE considerations for resource-intensive operations
  - ACCESSIBILITY considerations for UI elements

- For SQL queries, comment on:

  - The business purpose of each query
  - The meaning of complex joins or conditions
  - Performance considerations (indexes used, potential bottlenecks)
  - Data integrity protections implemented

- For algorithms and complex logic:

  - Break down the steps with detailed explanation of each part
  - Include small examples where appropriate to illustrate behavior
  - Link to relevant theory or documentation when using established patterns

- Never leave "magic numbers" or constants without explanatory comments
- Document any workarounds or temporary solutions with TODOs and explanations
- For domain-specific code, include business context that explains WHY a rule exists
- Comment on security considerations explicitly when relevant
- For UI components, explain the purpose of key styling decisions and their relationship to UX goals

- COMMENT DENSITY: Aim for approximately one meaningful comment for every 3-4 lines of code in complex sections
- VISUAL STRUCTURE: Use comment blocks to improve code scanability and create clear visual separation between logical sections

# Comment Maintenance

- ALWAYS update comments when modifying the corresponding code
- When refactoring or redesigning code, review and update ALL affected comments
- Flag any comments that might need verification with TODO markers if unsure
- Never leave "zombie comments" that refer to code that no longer exists
- When changing function signatures or behaviors, immediately update their documentation
- If asked to modify code, AUTOMATICALLY update any comments that become outdated
- Check for comment/code inconsistencies when debugging issues
- When adding new functionality to existing code, update high-level documentation to reflect the changes
- Ensure comments correctly reflect the current state of the code, not just its original design
- When making structural changes, update architectural comments to reflect the new design

# Educational Explanations

- When explaining technical concepts, provide BOTH technical definitions AND beginner-friendly explanations
- Break down complex technical terms using simple analogies or real-world examples
- When introducing acronyms like "RPC," always explain what they stand for AND what they mean conceptually
- Structure explanations in layers: simple overview first, followed by technical details
- Compare new concepts to ones I likely already understand as a sophomore CS student
- When explaining code patterns or algorithms, include:
  1. The formal/technical name (e.g., "Factory Pattern," "Recursion")
  2. A simple 1-2 sentence explanation of what it does
  3. Why it's useful in this specific context
  4. A tiny example if helpful
- Use visual language when possible ("think of it like..." or "imagine...")
- For database concepts, networking, or other infrastructure topics, provide extra context since these are often less covered in early CS courses
- When explaining library-specific functions, briefly explain the underlying CS concept they're built on
- Link concepts back to fundamental CS principles I would have learned in first/second year

# File location

- All of my secret keys are stored in .env.local file in the root directory if you need me to do anything with the secret keys or URLs tell me. I will do it for you
